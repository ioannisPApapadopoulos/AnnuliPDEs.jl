"""
Helper functions for computing the solutions errors
"""

###
# Collect error routines for the Zernike (annular) basis
###

# Collect errors for the (1-element) weighted Zernike (annular) basis
function collect_errors(Z::Weighted{T, <:MultivariateOrthogonalPolynomial}, u::PseudoBlockVector, ua::Function, errors=[]) where T

    @assert Z.P isa ZernikeAnnulus || Z.P isa Zernike
    w = weight(Z)
    (a, b) = unweighted(Z).a, unweighted(Z).b

    N = 2*size((ModalTrav(u).matrix),1)-1
    g = AlgebraicCurveOrthogonalPolynomials.grid(Z, Block(N))

    if Z.P isa ZernikeAnnulus
        œÅ = unweighted(Z).œÅ 
        F = ZernikeAnnulusITransform{T}(N, a, b, 0, œÅ)
    else
        F = ZernikeITransform{T}(N, a, b)
    end

    vals = F * u # synthesis - transform to grid

    vals = w[g].*vals # add in weight

    p = g -> [g.r, g.Œ∏]
    rŒ∏ = map(p, g)
    R = first.(rŒ∏)
    Œò = last.(rŒ∏)
    U = map(ua, R, Œò)
    
    append!(errors, norm(U-vals, ‚àû))
    return errors
end

# Collect errors for the (2-element) Zernike + Zernike annular basis
function collect_errors(Z::Vector{MultivariateOrthogonalPolynomial{2,T}}, u::Tuple{ModalTrav{T, Matrix{T}}, ModalTrav{T, Matrix{T}}}, ua::Function, scale::Bool=true, errors=[]) where T

    @assert Z[1] isa ZernikeAnnulus && Z[2] isa Zernike

    (Œ±, Œ≤, œÅ) = Z[1].a, Z[1].b, Z[1].œÅ
    (a, b) = Z[2].a, Z[2].b


    N = 2*size((ModalTrav(u[1]).matrix),1)-1
    g‚Çê = AlgebraicCurveOrthogonalPolynomials.grid(Z[1], Block(N))
    g = AlgebraicCurveOrthogonalPolynomials.grid(Z[2], Block(N))

    F‚Çê = ZernikeAnnulusITransform{T}(N, Œ±, Œ≤, 0, œÅ)
    F = ZernikeITransform{T}(N, a, b)
    vals‚Çê = F‚Çê * u[1] # Synthesis on annulus cell
    vals = F * u[2]   # Synthesis on disk cell

    p = g -> [g.r, g.Œ∏]
    rŒ∏‚Çê = map(p, g‚Çê)
    R‚Çê = first.(rŒ∏‚Çê)
    Œò‚Çê = last.(rŒ∏‚Çê)
    U‚Çê = map(ua, R‚Çê, Œò‚Çê)

    rŒ∏ = map(p, g)
    R = first.(rŒ∏)
    # Scale the disk cell so the outer radius is œÅ
    if scale
        R = œÅ*R
    end
    Œò = last.(rŒ∏)
    U = map(ua, R, Œò)
    
    append!(errors, [max(norm(U‚Çê-vals‚Çê, ‚àû), norm(U-vals, ‚àû))])
    return errors
end

###
# Collect error routines for the Chebyshev/two-band - Fourier series
###

# One disk/annulus cell
function _collect_errors(U::Adjoint{T, Matrix{T}}, ùõâ::AbstractArray, ùê´::AbstractArray, ua::Function, errors=[]) where T
    
    R = repeat(ùê´, 1, length(ùõâ))
    Œò = repeat(ùõâ, 1, length(ùê´))
    Ua = map(ua, R, Œò')
    
    append!(errors, norm(Ua-U, ‚àû))
    return errors
end

# One disk cell + one annulus cell
function _collect_errors(U::Adjoint{T, Matrix{T}}, U‚Çê::Adjoint{T, Matrix{T}}, Œ∏::AbstractArray, r::AbstractArray, r‚Çê::AbstractArray, ua::Function, errors=[]) where T
    
    R = repeat(r, 1, length(Œ∏))
    R‚Çê = repeat(r‚Çê, 1, length(Œ∏))
    Œò = repeat(Œ∏, 1, length(r))
    Œò‚Çê = repeat(Œ∏, 1, length(r‚Çê))
    Ua = map(ua, R, Œò')
    Ua‚Çê = map(ua, R‚Çê, Œò‚Çê')
    
    append!(errors, max(norm(Ua-U, ‚àû),norm(Ua‚Çê-U‚Çê, ‚àû)))
    return errors
end

# Works for both Chebyshev and Two-band
function collect_errors(TFœÅ::Tuple, X::AbstractMatrix, ua::Function, errors=[])

    # One cell routine
    if length(TFœÅ) == 3
        (T, F, œÅ) = TFœÅ
        try
            @assert T.parent isa ChebyshevT 
        catch 
            @assert T.P isa TwoBandJacobi
        end
        @assert F isa Fourier
        @assert œÅ isa Number

        V = promote_type(eltype(T), eltype(F))

        n = size(X,1)-2
        Z = ZernikeAnnulus{V}(œÅ,1,1) # want to measure the errors on the ZernikeAnnulus grid

        g = AlgebraicCurveOrthogonalPolynomials.grid(Z, Block(n))
        p = g -> [g.r, g.Œ∏]; rŒ∏ = map(p, g); rs = first.(rŒ∏)[:,1]; Œ∏s = last.(rŒ∏)[1,:]
        # Compute values of the solution on the grid
        Uu = (F[Œ∏s,1:n+2]*(T[rs,1:n+2]*X)')' # Directly expand the tensor-proudct basis on the grid
        return _collect_errors(Uu, Œ∏s, rs, ua, errors)
    # Two cell routine
    elseif length(TFœÅ) == 4
        (T, T‚Çê, F, œÅ) = TFœÅ
        @assert T.parent isa ChebyshevT && T‚Çê.parent isa ChebyshevT
        @assert F isa Fourier
        @assert œÅ isa Number

        V = promote_type(eltype(T), eltype(T‚Çê), eltype(F))

        n = (size(X,1)-2)√∑2
        # When doing spectral element, we use these grids instead
        Z = Zernike{V}(0,0)
        Z‚Çê = ZernikeAnnulus{V}(œÅ,0,0)
        
        p = g -> [g.r, g.Œ∏];
        g = AlgebraicCurveOrthogonalPolynomials.grid(Z, Block(n))
        g‚Çê = AlgebraicCurveOrthogonalPolynomials.grid(Z‚Çê, Block(n))
        rŒ∏ = map(p, g); rs = œÅ.*first.(rŒ∏)[:,1]; Œ∏s = last.(rŒ∏)[1,:]
        rŒ∏‚Çê = map(p, g‚Çê); rs‚Çê = first.(rŒ∏‚Çê)[:,1]; Œ∏s‚Çê = last.(rŒ∏‚Çê)[1,:]
    
        Uu = (F[Œ∏s,1:n+1]*(T[rs,1:n+1]*X[n+2:end,1:n+1])')'
        Uu‚Çê = (F[Œ∏s‚Çê,1:n+1]*(T‚Çê[rs‚Çê,1:n+1]*X[1:n+1,1:n+1])')'
        
        return _collect_errors(Uu, Uu‚Çê, Œ∏s, rs, rs‚Çê, ua, errors)
    else
        error("Collect error not implemented for these arguments.")
    end

end